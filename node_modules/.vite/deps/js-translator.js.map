{
  "version": 3,
  "sources": ["../../js-translator/src/index.js"],
  "sourcesContent": ["export default class Translator {\n    /**\n     *\n     * @return {Object}\n     */\n    get translation() {\n        if (this.translations[this.locale] !== undefined) {\n            return this.translations[this.locale];\n        }\n\n        if (this.translations[this.localeArea] !== undefined) {\n            return this.translations[this.localeArea];\n        }\n\n        if (this.translations[this.localeDefault] !== undefined) {\n            return this.translations[this.localeDefault];\n        }\n\n        return {};\n    }\n\n    /**\n     * @param {Object} translations\n     * @param {BBCode} [bbCodeParser]\n     * @param {String} [locale]\n     * @param {String} [localeArea]\n     * @param {String} [localeDefault]\n     * @param {RegExp} [regexpParameters]\n     * @param {RegExp} [regexpTranslations]\n     */\n    constructor(translations, {\n        bbCodeParser = undefined,\n        locale = 'en-GB',\n        localeArea = 'en-GB',\n        localeDefault = 'en-GB',\n        regexpParameters = /\\\\?\\[([^\\[\\]]+)\\]/g,\n        regexpTranslations = /[\\\\\\$]?\\{([^{}]+)\\}/g,\n    }) {\n        /**\n         * all translations in structure. structure is\n         *    LOCALE:\n         *        TRKEY => VALUE\n         *        ...\n         *\n         * TRKEY is defined bei \"TRFILE.TRINDEX\" given from backend\n         *\n         * @var {Object}\n         */\n        this.translations = {};\n\n        this.bbCodeParser       = bbCodeParser;\n        this.locale             = locale;\n        this.localeArea         = localeArea;\n        this.localeDefault      = localeDefault;\n        this.regexpParameters   = regexpParameters;\n        this.regexpTranslations = regexpTranslations;\n\n        this.setTranslations(translations);\n    }\n\n    /**\n     *\n     * @param {String} key\n     * @param {String} [defaults]\n     * @return {*}\n     */\n    getValueFromKey(key, defaults) {\n        const keys = key.split('.');\n\n        let text = keys.reduce((acc, entry) => {\n            if (acc === undefined) {\n                return undefined;\n            }\n            return acc[entry] ?? undefined;\n        }, this.translation);\n\n        if (text === undefined && this.translations[this.localeArea] !== undefined) {\n            text = keys.reduce((acc, entry) => {\n                if (acc === undefined) {\n                    return undefined;\n                }\n                return acc[entry] ?? undefined;\n            }, this.translations[this.localeArea]);\n        }\n\n        if (text === undefined && this.translations[this.localeDefault] !== undefined) {\n            text = keys.reduce((acc, entry) => {\n                if (acc === undefined) {\n                    return undefined;\n                }\n                return acc[entry] ?? undefined;\n            }, this.translations[this.localeDefault]);\n        }\n\n        if (text === undefined) {\n            if (defaults === undefined) {\n                return '{' + key + '}';\n            }\n            text = defaults;\n        }\n\n        return text;\n    }\n\n    /**\n     *\n     * @param {BBCode} bbCodeParser\n     * @return {Translator}\n     */\n    setBBCodeParser(bbCodeParser) {\n        this.bbCodeParser = bbCodeParser;\n\n        return this;\n    }\n\n    /**\n     * set Translations\n     *\n     * @param {Object} translations\n     * @returns {Translator}\n     */\n    setTranslations(translations) {\n        Object.entries(translations).forEach(([locale, values]) => {\n            if (this.translations[locale] === undefined) {\n                this.translations[locale] = {};\n            }\n\n            this.translations[locale] = {...values};\n        });\n\n        return this;\n    }\n\n    /**\n     * translate a text with given parameters\n     *\n     * @param {String} key\n     * @param {Object} [parameters]\n     * @param {String} [defaults]\n     * @returns {String}\n     */\n    translate(key, parameters, defaults) {\n        if (key === undefined || key === null) {\n            return key;\n        }\n\n        if (key.charAt(0) === '{') {\n            key = key.slice(1);\n        }\n        if (key.charAt(key.length - 1) === '}') {\n            key = key.slice(0, key.length - 1);\n        }\n\n        let text = this.getValueFromKey(key, defaults);\n        if (text === null || text === undefined) {\n            return text;\n        }\n\n        if (typeof text !== 'string') {\n            return text;\n        }\n\n        // parameter replacement\n        if (parameters instanceof Object) {\n            text = Object.keys(parameters).reduce((acc, name) => acc.replace(new RegExp('\\\\[' + name + '\\\\]', 'gi'), parameters[name]), text);\n        }\n\n        if (this.bbCodeParser === undefined) {\n            return text;\n        }\n\n        return this.bbCodeParser.parse(text);\n    };\n\n    /**\n     * inline translation\n     *\n     * @param {String} text\n     * @returns {String}\n     */\n    translateInline(text) {\n        // replace the text\n        text = text.replace(this.regexpTranslations, (match, key) => {\n            switch (match.charAt(0)) {\n                case '\\\\':\n                    return match.slice(1);\n                case '$':\n                    return match;\n            }\n\n            return this.translate(key, undefined, match);\n        });\n\n        return text;\n    };\n}\n"],
  "mappings": "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",
  "names": []
}

// node_modules/js-translator/src/index.js
var Translator = class {
  /**
   *
   * @return {Object}
   */
  get translation() {
    if (this.translations[this.locale] !== void 0) {
      return this.translations[this.locale];
    }
    if (this.translations[this.localeArea] !== void 0) {
      return this.translations[this.localeArea];
    }
    if (this.translations[this.localeDefault] !== void 0) {
      return this.translations[this.localeDefault];
    }
    return {};
  }
  /**
   * @param {Object} translations
   * @param {BBCode} [bbCodeParser]
   * @param {String} [locale]
   * @param {String} [localeArea]
   * @param {String} [localeDefault]
   * @param {RegExp} [regexpParameters]
   * @param {RegExp} [regexpTranslations]
   */
  constructor(translations, {
    bbCodeParser = void 0,
    locale = "en-GB",
    localeArea = "en-GB",
    localeDefault = "en-GB",
    regexpParameters = /\\?\[([^\[\]]+)\]/g,
    regexpTranslations = /[\\\$]?\{([^{}]+)\}/g
  }) {
    this.translations = {};
    this.bbCodeParser = bbCodeParser;
    this.locale = locale;
    this.localeArea = localeArea;
    this.localeDefault = localeDefault;
    this.regexpParameters = regexpParameters;
    this.regexpTranslations = regexpTranslations;
    this.setTranslations(translations);
  }
  /**
   *
   * @param {String} key
   * @param {String} [defaults]
   * @return {*}
   */
  getValueFromKey(key, defaults) {
    const keys = key.split(".");
    let text = keys.reduce((acc, entry) => {
      if (acc === void 0) {
        return void 0;
      }
      return acc[entry] ?? void 0;
    }, this.translation);
    if (text === void 0 && this.translations[this.localeArea] !== void 0) {
      text = keys.reduce((acc, entry) => {
        if (acc === void 0) {
          return void 0;
        }
        return acc[entry] ?? void 0;
      }, this.translations[this.localeArea]);
    }
    if (text === void 0 && this.translations[this.localeDefault] !== void 0) {
      text = keys.reduce((acc, entry) => {
        if (acc === void 0) {
          return void 0;
        }
        return acc[entry] ?? void 0;
      }, this.translations[this.localeDefault]);
    }
    if (text === void 0) {
      if (defaults === void 0) {
        return "{" + key + "}";
      }
      text = defaults;
    }
    return text;
  }
  /**
   *
   * @param {BBCode} bbCodeParser
   * @return {Translator}
   */
  setBBCodeParser(bbCodeParser) {
    this.bbCodeParser = bbCodeParser;
    return this;
  }
  /**
   * set Translations
   *
   * @param {Object} translations
   * @returns {Translator}
   */
  setTranslations(translations) {
    Object.entries(translations).forEach(([locale, values]) => {
      if (this.translations[locale] === void 0) {
        this.translations[locale] = {};
      }
      this.translations[locale] = { ...values };
    });
    return this;
  }
  /**
   * translate a text with given parameters
   *
   * @param {String} key
   * @param {Object} [parameters]
   * @param {String} [defaults]
   * @returns {String}
   */
  translate(key, parameters, defaults) {
    if (key === void 0 || key === null) {
      return key;
    }
    if (key.charAt(0) === "{") {
      key = key.slice(1);
    }
    if (key.charAt(key.length - 1) === "}") {
      key = key.slice(0, key.length - 1);
    }
    let text = this.getValueFromKey(key, defaults);
    if (text === null || text === void 0) {
      return text;
    }
    if (typeof text !== "string") {
      return text;
    }
    if (parameters instanceof Object) {
      text = Object.keys(parameters).reduce((acc, name) => acc.replace(new RegExp("\\[" + name + "\\]", "gi"), parameters[name]), text);
    }
    if (this.bbCodeParser === void 0) {
      return text;
    }
    return this.bbCodeParser.parse(text);
  }
  /**
   * inline translation
   *
   * @param {String} text
   * @returns {String}
   */
  translateInline(text) {
    text = text.replace(this.regexpTranslations, (match, key) => {
      switch (match.charAt(0)) {
        case "\\":
          return match.slice(1);
        case "$":
          return match;
      }
      return this.translate(key, void 0, match);
    });
    return text;
  }
};
export {
  Translator as default
};
//# sourceMappingURL=js-translator.js.map
